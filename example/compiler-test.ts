/* File auto-generated by @typed/compiler */
import { constant, pipe, flow } from '@fp-ts/data/Function'
import {
  buildModules,
  Module,
  runMatcherWithFallback,
  provideBrowserIntrinsics,
  Fallback,
} from '@typed/framework'
import * as Fx from '@typed/fx'
import { renderInto } from '@typed/html'
import * as Route from '@typed/route'

import * as typedModule3 from './pages/bar/bar.js'
import * as typedModule1 from './pages/fallback.js'
import * as typedModule4 from './pages/foo/foo.js'
import * as typedModule2 from './pages/home.js'
import * as typedModule0 from './pages/layout.js'
import * as typedModule5 from './pages/react/counter.jsx'

export const modules = [
  Module.make(typedModule2.route, constant(typedModule2.main), { layout: typedModule0.layout }),
  Module.make(
    pipe(typedModule3.route, Route.provideLayer(typedModule3.environment)),
    flow(typedModule3.main, Fx.provideSomeLayer(typedModule3.environment)),
    { layout: pipe(typedModule3.layout, Fx.provideSomeLayer(typedModule3.environment)) },
  ),
  Module.make(typedModule4.route, typedModule4.main, { layout: typedModule0.layout }),
  Module.make(typedModule5.route, typedModule5.main, { layout: typedModule0.layout }),
] as const

export const matcher = buildModules(modules)

export const fallback: Fallback = {
  type: 'Renderable',
  fallback: typedModule1.fallback,
  layout: typedModule0.layout,
} as const

export const render = <T extends HTMLElement>(parentElement: T) =>
  pipe(
    runMatcherWithFallback(matcher, fallback),
    renderInto(parentElement),
    provideBrowserIntrinsics(window, { parentElement }),
  )
