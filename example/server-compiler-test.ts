/* This file was auto-generated by @typed/compiler */

import { join } from 'path'

import * as F from '@fp-ts/data/Function'
import { readIndexHtml, getClientDirectory, runExpressApp } from '@typed/compiler'
import { Module, buildModules } from '@typed/framework'
import * as Fx from '@typed/fx'
import * as Route from '@typed/route'
import express from 'express'
import expressStaticGzip from 'express-static-gzip'
import httpDevServer from 'vavite/http-dev-server'

import * as typedModule3 from './pages/bar/bar.js'
import * as typedModule1 from './pages/fallback.js'
import * as typedModule4 from './pages/foo/foo.js'
import * as typedModule2 from './pages/home.js'
import * as typedModule0 from './pages/layout.js'
import * as typedModule5 from './pages/react/counter.jsx'

export const app: express.Express = express()
export const clientDirectory = getClientDirectory(import.meta.url)

export function staticGzip(
  options: expressStaticGzip.ExpressStaticGzipOptions,
): express.RequestHandler {
  return expressStaticGzip(clientDirectory, options)
}

export const modules = [
  Module.make(typedModule2.route, () => typedModule2.main, { layout: typedModule0.layout }),
  Module.make(
    F.pipe(typedModule3.route, Route.provideLayer(typedModule3.environment)),
    F.flow(typedModule3.main, Fx.provideSomeLayer(typedModule3.environment)),
    { layout: typedModule3.layout },
  ),
  Module.make(typedModule4.route, typedModule4.main, { layout: typedModule0.layout }),
  Module.make(typedModule5.route, typedModule5.main, { layout: typedModule0.layout }),
] as const

export const matcher = buildModules(modules)

export const main = matcher.notFound(typedModule1.fallback, { layout: typedModule0.layout })

export const indexHtml: string = readIndexHtml(join(clientDirectory, 'index.html'))

export const requestHandler: express.RequestHandler = runExpressApp(main, indexHtml)

export const listen = ((...args: ArgsOf<typeof app['listen']>) => {
  if (httpDevServer) {
    httpDevServer.on('request', app)
  } else {
    app.listen(...args)
  }
}) as typeof app['listen']

type ArgsOf<T> = T extends (...args: infer A) => any ? A : never
