/* This file was auto-generated by @typed/compiler */

import { join } from 'path'

import * as F from '@fp-ts/data/Function'
import { readIndexHtml, getClientDirectory, runExpressApp } from '@typed/compiler'
import { Module, buildModules } from '@typed/framework'
import * as Fx from '@typed/fx'
import * as Route from '@typed/route'
import express from 'express'
import expressStaticGzip from 'express-static-gzip'
import httpDevServer from 'vavite/http-dev-server'

import * as typedModule3 from './pages/bar/bar.js'
import * as typedModule1 from './pages/fallback.js'
import * as typedModule4 from './pages/foo/foo.js'
import * as typedModule2 from './pages/home.js'
import * as typedModule0 from './pages/layout.js'
import * as typedModule5 from './pages/react/counter.jsx'

const MAX_AGE = 31536000000 // 1 year

const app = express()
const clientDirectory = getClientDirectory(import.meta.url)

if (import.meta.env.PROD) {
  // TODO: Handle mapping assets to a CDN in production
  app.use(
    expressStaticGzip(clientDirectory, { serveStatic: { maxAge: MAX_AGE, cacheControl: true } }),
  )
}

const matcher = buildModules([
  Module.make(typedModule2.route, () => typedModule2.main, { layout: typedModule0.layout }),
  Module.make(
    F.pipe(typedModule3.route, Route.provideLayer(typedModule3.environment)),
    F.flow(typedModule3.main, Fx.provideSomeLayer(typedModule3.environment)),
    { layout: typedModule3.layout },
  ),
  Module.make(typedModule4.route, typedModule4.main, { layout: typedModule0.layout }),
  Module.make(typedModule5.route, typedModule5.main, { layout: typedModule0.layout }),
])
const main = matcher.notFound(typedModule1.fallback, { layout: typedModule0.layout })
const indexHtml: string = readIndexHtml(join(clientDirectory, 'index.html'))

app.get('*', runExpressApp(main, indexHtml))

if (httpDevServer) {
  httpDevServer.on('request', app)
} else {
  app.listen(3000, () => {
    console.log('Starting prod server on port 3000')
  })
}
