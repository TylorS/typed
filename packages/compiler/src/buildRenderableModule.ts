import { EOL } from 'os'
import { dirname } from 'path'

import type { Project } from 'ts-morph'

import { SourceFileModule } from './SourceFileModule.js'
import { buildImportsAndModules, runMatcherWithFallback } from './helpers.js'

export function buildRenderableModule(
  sourceFileModules: SourceFileModule[],
  project: Project,
  outFile: string,
) {
  const [imports, modules, fallback] = buildImportsAndModules(sourceFileModules, dirname(outFile))
  const shouldImportForEnvironment = modules.some((x) => x.includes('provideLayer'))
  const shouldImportModule = modules.length > 0

  const entrypoint = project.createSourceFile(
    outFile,
    `/* This file was auto-generated by @typed/compiler */

import * as F from '@fp-ts/data/Function'
${shouldImportForEnvironment ? `import * as Fx from '@typed/fx'` : ''}
${shouldImportForEnvironment ? `import * as Route from '@typed/route'` : ''}
import { ${shouldImportModule ? 'Module, ' : ''}buildModules } from '@typed/framework'
${imports.join('\n')}

export const modules = [
  ${modules.join(',' + EOL + '  ')}
] as const

export const matcher = buildModules(modules)

export const main = ${fallback ? runMatcherWithFallback(fallback) : `matcher.run`}
`,
    { overwrite: true },
  )

  const diagnostics = entrypoint.getPreEmitDiagnostics()

  if (diagnostics.length > 0) {
    console.error(entrypoint.getFullText())

    throw new Error(project.formatDiagnosticsWithColorAndContext(diagnostics))
  }

  return entrypoint
}
