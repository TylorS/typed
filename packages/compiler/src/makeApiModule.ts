import { EOL } from 'os'
import { dirname, relative } from 'path'

import type { Project, SourceFile } from 'ts-morph'

import type { ApiModuleTree } from './ApiModuleTree.js'
import { addNamedImport, addNamespaceImport, appendText } from './ts-morph-helpers.js'

export function makeApiModule(
  project: Project,
  moduleTree: ApiModuleTree,
  fileName: string,
  importer: string,
  isExpress: boolean,
) {
  let i = 0
  const importNames = new Map<string, string>()
  const sourceFile = project.createSourceFile(
    fileName,
    '/* File auto-generated by @typed/compiler */',
    { overwrite: true },
  )

  if (isExpress) {
    addNamedImport(sourceFile, ['registerHandlers'], '@typed/framework/express')
    addNamespaceImport(sourceFile, 'express', 'express', true)
  }

  addModuleTreeImports(moduleTree)

  appendText(
    sourceFile,
    `export const handlers = [
    ${constructHandlers(moduleTree).join(',' + EOL + '  ')}
]`,
  )

  if (isExpress) {
    appendText(sourceFile, `export const router: express.Router = registerHandlers(handlers)`)
  }

  return sourceFile

  function addModuleTreeImports(moduleTree: ApiModuleTree) {
    if (moduleTree.environment) {
      addNamespace(moduleTree.environment.sourceFile)
    }

    if (moduleTree.modules) {
      for (const mod of moduleTree.modules) {
        addNamespace(mod.sourceFile)
      }
    }

    for (const child of moduleTree.children) {
      addModuleTreeImports(child)
    }
  }

  function addNamespace(toImport: SourceFile) {
    const filePath = toImport.getFilePath()

    if (importNames.has(filePath)) {
      return importNames.get(filePath) as string
    }

    const name = `typedModule${i++}`

    importNames.set(filePath, name)

    addNamespaceImport(
      sourceFile,
      name,
      './' + relative(dirname(importer), filePath.replace(/.ts(x)?/, '.js$1')),
    )
  }

  function constructHandlers(moduleTree: ApiModuleTree): string[] {
    const handlers = []

    for (const mod of moduleTree.modules) {
      const importName = getImportName(mod.sourceFile)

      for (const exportName of mod.handlerExportNames) {
        const handlerIdentifier = `${importName}.${exportName}`
        const inheritedProvider = moduleTree.environment
          ? `.provideSomeLayer(${getImportName(moduleTree.environment.sourceFile)}.environment)`
          : ``

        if (mod.hasEnvironment) {
          handlers.push(
            `${handlerIdentifier}${inheritedProvider}.provideSomeLayer(${importName}.environment)`,
          )
        } else {
          handlers.push(handlerIdentifier + inheritedProvider)
        }
      }
    }

    for (const child of moduleTree.children) {
      handlers.push(...constructHandlers(child))
    }

    return handlers
  }

  function getImportName(sourceFile: SourceFile) {
    return importNames.get(sourceFile.getFilePath()) as string
  }
}
