import { EventHandler } from './EventHandler.js'
import { Placeholder } from './Placeholder.js'

// Types used for describing properties of DOM nodes.
// These are not intended to be used directly, but rather for usage
// in an `extends` clause to allow for better types than any.

// Be careful with using these types, as they are not exhaustive
// and mostly generated by Github Copilot.

export type NodeProperties = {
  readonly textContent?: Placeholder<any, any, string> | null
}

export type ElementProperties = NodeProperties & {
  readonly className?: Placeholder<any, any, string>
  readonly id?: Placeholder<any, any, string>
  readonly innerHTML?: Placeholder<any, any, string>
  readonly scrollLeft?: Placeholder<any, any, number>
  readonly scrollTop?: Placeholder<any, any, number>
  readonly slot?: Placeholder<any, any, string>
}

export type HTMLElementProperties<Events = HTMLElementEventMap> = ElementProperties & {
  readonly accesskey?: Placeholder<any, any, string>
  readonly contenteditable?: Placeholder<any, any, string>
  readonly dir?: Placeholder<any, any, string>
  readonly draggable?: Placeholder<any, any, boolean>
  readonly hidden?: Placeholder<any, any, boolean>
  readonly hidefocus?: Placeholder<any, any, boolean>
  readonly innerText?: Placeholder<any, any, string>
  readonly lang?: Placeholder<any, any, string>
  readonly spellcheck?: Placeholder<any, any, boolean>
  readonly style?: Placeholder<any, any, string>
  readonly tabindex?: Placeholder<any, any, boolean>
  readonly title?: Placeholder<any, any, string>
} & {
  readonly [K in keyof Events as K extends string ? `on${Lowercase<K>}` : never]?: EventHandler<
    Events[K] & Event,
    any,
    any
  >
} & {
  readonly [_ in `data-${string}`]: Placeholder<any, any, string>
} & {
  readonly [_ in `aria-${string}`]: Placeholder<any, any, string>
}

export type HTMLAnchorElementProperties = HTMLElementProperties & {
  readonly charset?: Placeholder<any, any, string>
  readonly coords?: Placeholder<any, any, string>
  readonly download?: Placeholder<any, any, string>
  readonly hash?: Placeholder<any, any, string>
  readonly host?: Placeholder<any, any, string>
  readonly hostname?: Placeholder<any, any, string>
  readonly href?: Placeholder<any, any, string>
  readonly hreflang?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly pathname?: Placeholder<any, any, string>
  readonly port?: Placeholder<any, any, string>
  readonly protocol?: Placeholder<any, any, string>
  readonly rel?: Placeholder<any, any, string>
  readonly rev?: Placeholder<any, any, string>
  readonly search?: Placeholder<any, any, string>
  readonly shape?: Placeholder<any, any, string>
  readonly target?: Placeholder<any, any, string>
  readonly text?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly urn?: Placeholder<any, any, string>
}

export type HTMLAreaElementProperties = HTMLElementProperties & {
  readonly alt?: Placeholder<any, any, string>
  readonly coords?: Placeholder<any, any, string>
  readonly download?: Placeholder<any, any, string>
  readonly hash?: Placeholder<any, any, string>
  readonly host?: Placeholder<any, any, string>
  readonly hostname?: Placeholder<any, any, string>
  readonly href?: Placeholder<any, any, string>
  readonly noHref?: Placeholder<any, any, string>
  readonly pathname?: Placeholder<any, any, string>
  readonly port?: Placeholder<any, any, string>
  readonly protocol?: Placeholder<any, any, string>
  readonly rel?: Placeholder<any, any, string>
  readonly search?: Placeholder<any, any, string>
  readonly shape?: Placeholder<any, any, string>
  readonly target?: Placeholder<any, any, string>
}

export type HTMLAudioElementProperties = HTMLElementProperties & {
  readonly autoplay?: Placeholder<any, any, boolean>
  readonly buffered?: Placeholder<any, any, string>
  readonly controls?: Placeholder<any, any, boolean>
  readonly currentSrc?: Placeholder<any, any, string>
  readonly currentTime?: Placeholder<any, any, number>
  readonly defaultMuted?: Placeholder<any, any, boolean>
  readonly defaultPlaybackRate?: Placeholder<any, any, number>
  readonly duration?: Placeholder<any, any, number>
  readonly ended?: Placeholder<any, any, boolean>
  readonly error?: Placeholder<any, any, string>
  readonly loop?: Placeholder<any, any, boolean>
  readonly mediaGroup?: Placeholder<any, any, string>
  readonly muted?: Placeholder<any, any, boolean>
  readonly networkState?: Placeholder<any, any, number>
  readonly paused?: Placeholder<any, any, boolean>
  readonly playbackRate?: Placeholder<any, any, number>
  readonly played?: Placeholder<any, any, string>
  readonly preload?: Placeholder<any, any, string>
  readonly readyState?: Placeholder<any, any, number>
  readonly seekable?: Placeholder<any, any, string>
  readonly seeking?: Placeholder<any, any, boolean>
  readonly src?: Placeholder<any, any, string>
  readonly startDate?: Placeholder<any, any, string>
  readonly volume?: Placeholder<any, any, number>
}

export type HTMLBRElementProperties = HTMLElementProperties & {
  readonly clear?: Placeholder<any, any, string>
}

export type HTMLBaseElementProperties = HTMLElementProperties & {
  readonly href?: Placeholder<any, any, string>
  readonly target?: Placeholder<any, any, string>
}

export type HTMLBaseFontElementProperties = HTMLElementProperties & {
  readonly color?: Placeholder<any, any, string>
  readonly face?: Placeholder<any, any, string>
  readonly size?: Placeholder<any, any, string>
}

export type HTMLBodyElementProperties = HTMLElementProperties<HTMLBodyElementEventMap> & {
  readonly aLink?: Placeholder<any, any, string>
  readonly background?: Placeholder<any, any, string>
  readonly bgColor?: Placeholder<any, any, string>
  readonly link?: Placeholder<any, any, string>
  readonly text?: Placeholder<any, any, string>
  readonly vLink?: Placeholder<any, any, string>
}

export type HTMLButtonElementProperties = HTMLElementProperties & {
  readonly autofocus?: Placeholder<any, any, boolean>
  readonly disabled?: Placeholder<any, any, boolean>
  readonly form?: Placeholder<any, any, string>
  readonly formAction?: Placeholder<any, any, string>
  readonly formEnctype?: Placeholder<any, any, string>
  readonly formMethod?: Placeholder<any, any, string>
  readonly formNoValidate?: Placeholder<any, any, boolean>
  readonly formTarget?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly validationMessage?: Placeholder<any, any, string>
  readonly validity?: Placeholder<any, any, string>
  readonly value?: Placeholder<any, any, string>
  readonly willValidate?: Placeholder<any, any, boolean>
}

export type HTMLCanvasElementProperties = HTMLElementProperties & {
  readonly height?: Placeholder<any, any, number>
  readonly width?: Placeholder<any, any, number>
}

export type HTMLContentElementProperties = HTMLElementProperties & {
  readonly select?: Placeholder<any, any, string>
}

export type HTMLDListElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder<any, any, boolean>
}

export type HTMLDataElementProperties = HTMLElementProperties & {
  readonly value?: Placeholder<any, any, string>
}

export type HTMLDirectoryElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder<any, any, boolean>
}

export type HTMLDivElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
}

export type HTMLEmbedElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLFieldSetElementProperties = HTMLElementProperties & {
  readonly disabled?: Placeholder<any, any, boolean>
  readonly form?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly validationMessage?: Placeholder<any, any, string>
  readonly validity?: Placeholder<any, any, string>
  readonly willValidate?: Placeholder<any, any, boolean>
}

export type HTMLFontElementProperties = HTMLElementProperties & {
  readonly color?: Placeholder<any, any, string>
  readonly face?: Placeholder<any, any, string>
  readonly size?: Placeholder<any, any, string>
}

export type HTMLFormElementProperties = HTMLElementProperties & {
  readonly acceptCharset?: Placeholder<any, any, string>
  readonly action?: Placeholder<any, any, string>
  readonly autocomplete?: Placeholder<any, any, string>
  readonly enctype?: Placeholder<any, any, string>
  readonly encoding?: Placeholder<any, any, string>
  readonly length?: Placeholder<any, any, number>
  readonly method?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly noValidate?: Placeholder<any, any, boolean>
  readonly target?: Placeholder<any, any, string>
}

export type HTMLFrameElementProperties = HTMLElementProperties & {
  readonly border?: Placeholder<any, any, string>
  readonly frameBorder?: Placeholder<any, any, string>
  readonly frameSpacing?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string | number>
  readonly longDesc?: Placeholder<any, any, string>
  readonly marginHeight?: Placeholder<any, any, string>
  readonly marginWidth?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly noResize?: Placeholder<any, any, boolean>
  readonly scrolling?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string | number>
}

export type HTMLFrameSetElementProperties = HTMLElementProperties & {
  readonly border?: Placeholder<any, any, string>
  readonly borderFrame?: Placeholder<any, any, string>
  readonly cols?: Placeholder<any, any, string>
  readonly frameBorder?: Placeholder<any, any, string>
  readonly frameSpacing?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly rows?: Placeholder<any, any, string>
}

export type HTMLHRElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly color?: Placeholder<any, any, string>
  readonly noShade?: Placeholder<any, any, boolean>
  readonly size?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLHeadElementProperties = HTMLElementProperties & {
  readonly profile?: Placeholder<any, any, string>
}

export type HTMLHeadingElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
}

export type HTMLHtmlElementProperties = HTMLElementProperties & {
  readonly version?: Placeholder<any, any, string>
}

export type HTMLIFrameElementProperties = HTMLElementProperties<HTMLFrameSetElementEventMap> & {
  readonly align?: Placeholder<any, any, string>
  readonly allowfullscreen?: Placeholder<any, any, boolean>
  readonly allowpaymentrequest?: Placeholder<any, any, boolean>
  readonly allowusermedia?: Placeholder<any, any, boolean>
  readonly csp?: Placeholder<any, any, string>
  readonly frameborder?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string>
  readonly longdesc?: Placeholder<any, any, string>
  readonly marginheight?: Placeholder<any, any, string>
  readonly marginwidth?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly referrerpolicy?: Placeholder<any, any, string>
  readonly sandbox?: Placeholder<any, any, string>
  readonly scrolling?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly srcdoc?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLImageElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly alt?: Placeholder<any, any, string>
  readonly border?: Placeholder<any, any, string>
  readonly complete?: Placeholder<any, any, boolean>
  readonly crossorigin?: Placeholder<any, any, string>
  readonly currentsrc?: Placeholder<any, any, string>
  readonly decoding?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, number>
  readonly hspace?: Placeholder<any, any, number>
  readonly isMap?: Placeholder<any, any, boolean>
  readonly longdesc?: Placeholder<any, any, string>
  readonly lowsrc?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly naturalheight?: Placeholder<any, any, number>
  readonly naturalwidth?: Placeholder<any, any, number>
  readonly referrerpolicy?: Placeholder<any, any, string>
  readonly sizes?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly srcset?: Placeholder<any, any, string>
  readonly usemap?: Placeholder<any, any, string>
  readonly vspace?: Placeholder<any, any, number>
  readonly width?: Placeholder<any, any, number>
  readonly x?: Placeholder<any, any, number>
  readonly y?: Placeholder<any, any, number>
}

export type HTMLInputElementProperties = HTMLElementProperties & {
  readonly accept?: Placeholder<any, any, string>
  readonly align?: Placeholder<any, any, string>
  readonly alt?: Placeholder<any, any, string>
  readonly autocomplete?: Placeholder<any, any, string>
  readonly autofocus?: Placeholder<any, any, boolean>
  readonly border?: Placeholder<any, any, string>
  readonly checked?: Placeholder<any, any, boolean>
  readonly defaultChecked?: Placeholder<any, any, boolean>
  readonly defaultValue?: Placeholder<any, any, string>
  readonly disabled?: Placeholder<any, any, boolean>
  readonly files?: Placeholder<any, any, FileList>
  readonly form?: Placeholder<any, any, string>
  readonly formAction?: Placeholder<any, any, string>
  readonly formEnctype?: Placeholder<any, any, string>
  readonly formMethod?: Placeholder<any, any, string>
  readonly formNoValidate?: Placeholder<any, any, boolean>
  readonly formTarget?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string | number>
  readonly indeterminate?: Placeholder<any, any, boolean>
  readonly list?: Placeholder<any, any, string>
  readonly max?: Placeholder<any, any, string | number>
  readonly maxLength?: Placeholder<any, any, number>
  readonly min?: Placeholder<any, any, string | number>
  readonly minLength?: Placeholder<any, any, number>
  readonly multiple?: Placeholder<any, any, boolean>
  readonly name?: Placeholder<any, any, string>
  readonly pattern?: Placeholder<any, any, string>
  readonly placeholder?: Placeholder<any, any, string>
  readonly readOnly?: Placeholder<any, any, boolean>
  readonly required?: Placeholder<any, any, boolean>
  readonly selectionDirection?: Placeholder<any, any, string>
  readonly selectionEnd?: Placeholder<any, any, number>
  readonly selectionStart?: Placeholder<any, any, number>
  readonly size?: Placeholder<any, any, number>
  readonly src?: Placeholder<any, any, string>
  readonly step?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly useMap?: Placeholder<any, any, string>
  readonly value?: Placeholder<any, any, string>
  readonly valueAsDate?: Placeholder<any, any, Date>
  readonly valueAsNumber?: Placeholder<any, any, number>
  readonly width?: Placeholder<any, any, string | number>
}

export type HTMLLIElementProperties = HTMLElementProperties & {
  readonly type?: Placeholder<any, any, string>
  readonly value?: Placeholder<any, any, number>
}

export type HTMLLabelElementProperties = HTMLElementProperties & {
  readonly for?: Placeholder<any, any, string>
  readonly htmlFor?: Placeholder<any, any, string>
}

export type HTMLLegendElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
}

export type HTMLLinkElementProperties = HTMLElementProperties & {
  readonly as?: Placeholder<any, any, string>
  readonly charset?: Placeholder<any, any, string>
  readonly crossorigin?: Placeholder<any, any, string>
  readonly disabled?: Placeholder<any, any, boolean>
  readonly href?: Placeholder<any, any, string>
  readonly hreflang?: Placeholder<any, any, string>
  readonly integrity?: Placeholder<any, any, string>
  readonly media?: Placeholder<any, any, string>
  readonly referrerpolicy?: Placeholder<any, any, string>
  readonly rel?: Placeholder<any, any, string>
  readonly rev?: Placeholder<any, any, string>
  readonly sizes?: Placeholder<any, any, string>
  readonly target?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLMapElementProperties = HTMLElementProperties & {
  readonly name?: Placeholder<any, any, string>
}

export type HTMLMediaElementProperties = HTMLElementProperties & {
  readonly autoplay?: Placeholder<any, any, boolean>
  readonly controls?: Placeholder<any, any, boolean>
  readonly crossorigin?: Placeholder<any, any, string>
  readonly currentTime?: Placeholder<any, any, number>
  readonly defaultMuted?: Placeholder<any, any, boolean>
  readonly defaultPlaybackRate?: Placeholder<any, any, number>
  readonly disableRemotePlayback?: Placeholder<any, any, boolean>
  readonly loop?: Placeholder<any, any, boolean>
  readonly mediaGroup?: Placeholder<any, any, string>
  readonly muted?: Placeholder<any, any, boolean>
  readonly playbackRate?: Placeholder<any, any, number>
  readonly preload?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly volume?: Placeholder<any, any, number>
}

export type HTMLMenuElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder<any, any, boolean>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLMetaElementProperties = HTMLElementProperties & {
  readonly charset?: Placeholder<any, any, string>
  readonly content?: Placeholder<any, any, string>
  readonly httpEquiv?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
}

export type HTMLMeterElementProperties = HTMLElementProperties & {
  readonly high?: Placeholder<any, any, number>
  readonly low?: Placeholder<any, any, number>
  readonly max?: Placeholder<any, any, number>
  readonly min?: Placeholder<any, any, number>
  readonly optimum?: Placeholder<any, any, number>
  readonly value?: Placeholder<any, any, number>
}

export type HTMLModElementProperties = HTMLElementProperties & {
  readonly cite?: Placeholder<any, any, string>
  readonly datetime?: Placeholder<any, any, string>
}

export type HTMLOListElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder<any, any, boolean>
  readonly reversed?: Placeholder<any, any, boolean>
  readonly start?: Placeholder<any, any, number>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLObjectElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly archive?: Placeholder<any, any, string>
  readonly border?: Placeholder<any, any, string>
  readonly code?: Placeholder<any, any, string>
  readonly codeBase?: Placeholder<any, any, string>
  readonly codeType?: Placeholder<any, any, string>
  readonly data?: Placeholder<any, any, string>
  readonly declare?: Placeholder<any, any, boolean>
  readonly form?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string | number>
  readonly hspace?: Placeholder<any, any, number>
  readonly name?: Placeholder<any, any, string>
  readonly standby?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly useMap?: Placeholder<any, any, string>
  readonly vspace?: Placeholder<any, any, number>
  readonly width?: Placeholder<any, any, string | number>
}

export type HTMLOptGroupElementProperties = HTMLElementProperties & {
  readonly disabled?: Placeholder<any, any, boolean>
  readonly label?: Placeholder<any, any, string>
}

export type HTMLOptionElementProperties = HTMLElementProperties & {
  readonly defaultSelected?: Placeholder<any, any, boolean>
  readonly disabled?: Placeholder<any, any, boolean>
  readonly label?: Placeholder<any, any, string>
  readonly selected?: Placeholder<any, any, boolean>
  readonly text?: Placeholder<any, any, string>
  readonly value?: Placeholder<any, any, string>
}

export type HTMLOutputElementProperties = HTMLElementProperties & {
  readonly defaultValue?: Placeholder<any, any, string>
  readonly htmlFor?: Placeholder<any, any, string>
  readonly name?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly value?: Placeholder<any, any, string>
}

export type HTMLParagraphElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
}

export type HTMLParamElementProperties = HTMLElementProperties & {
  readonly name?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
  readonly value?: Placeholder<any, any, string>
  readonly valueType?: Placeholder<any, any, string>
}

export type HTMLPreElementProperties = HTMLElementProperties & {
  readonly width?: Placeholder<any, any, number>
}

export type HTMLProgressElementProperties = HTMLElementProperties & {
  readonly max?: Placeholder<any, any, number>
  readonly position?: Placeholder<any, any, number>
  readonly value?: Placeholder<any, any, number>
}

export type HTMLQuoteElementProperties = HTMLElementProperties & {
  readonly cite?: Placeholder<any, any, string>
}

export type HTMLScriptElementProperties = HTMLElementProperties & {
  readonly async?: Placeholder<any, any, boolean>
  readonly charset?: Placeholder<any, any, string>
  readonly crossorigin?: Placeholder<any, any, string>
  readonly defer?: Placeholder<any, any, boolean>
  readonly integrity?: Placeholder<any, any, string>
  readonly nomodule?: Placeholder<any, any, boolean>
  readonly nonce?: Placeholder<any, any, string>
  readonly referrerpolicy?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLSelectElementProperties = HTMLElementProperties & {
  readonly autocomplete?: Placeholder<any, any, string>
  readonly autofocus?: Placeholder<any, any, boolean>
  readonly disabled?: Placeholder<any, any, boolean>
  readonly form?: Placeholder<any, any, string>
  readonly multiple?: Placeholder<any, any, boolean>
  readonly name?: Placeholder<any, any, string>
  readonly required?: Placeholder<any, any, boolean>
  readonly size?: Placeholder<any, any, number>
  readonly value?: Placeholder<any, any, string>
}

export type HTMLSlotElementProperties = HTMLElementProperties & {
  readonly name?: Placeholder<any, any, string>
}

export type HTMLSourceElementProperties = HTMLElementProperties & {
  readonly media?: Placeholder<any, any, string>
  readonly sizes?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly srcset?: Placeholder<any, any, string>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLSpanElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
}

export type HTMLStyleElementProperties = HTMLElementProperties & {
  readonly media?: Placeholder<any, any, string>
  readonly nonce?: Placeholder<any, any, string>
  readonly scoped?: Placeholder<any, any, boolean>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLTableCaptionElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
}

export type HTMLTableCellElementProperties = HTMLElementProperties & {
  readonly abbr?: Placeholder<any, any, string>
  readonly align?: Placeholder<any, any, string>
  readonly axis?: Placeholder<any, any, string>
  readonly bgcolor?: Placeholder<any, any, string>
  readonly colspan?: Placeholder<any, any, number>
  readonly headers?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string>
  readonly nowrap?: Placeholder<any, any, boolean>
  readonly rowspan?: Placeholder<any, any, number>
  readonly scope?: Placeholder<any, any, string>
  readonly valign?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLTableColElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly span?: Placeholder<any, any, number>
  readonly valign?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLTableDataCellElementProperties = HTMLElementProperties & {
  readonly abbr?: Placeholder<any, any, string>
  readonly align?: Placeholder<any, any, string>
  readonly axis?: Placeholder<any, any, string>
  readonly bgcolor?: Placeholder<any, any, string>
  readonly colspan?: Placeholder<any, any, number>
  readonly headers?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string>
  readonly nowrap?: Placeholder<any, any, boolean>
  readonly rowspan?: Placeholder<any, any, number>
  readonly scope?: Placeholder<any, any, string>
  readonly valign?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLTableElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly bgcolor?: Placeholder<any, any, string>
  readonly border?: Placeholder<any, any, string>
  readonly cellpadding?: Placeholder<any, any, string>
  readonly cellspacing?: Placeholder<any, any, string>
  readonly frame?: Placeholder<any, any, string>
  readonly rules?: Placeholder<any, any, string>
  readonly summary?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLTableHeaderCellElementProperties = HTMLElementProperties & {
  readonly abbr?: Placeholder<any, any, string>
  readonly align?: Placeholder<any, any, string>
  readonly axis?: Placeholder<any, any, string>
  readonly bgcolor?: Placeholder<any, any, string>
  readonly colspan?: Placeholder<any, any, number>
  readonly headers?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, string>
  readonly nowrap?: Placeholder<any, any, boolean>
  readonly rowspan?: Placeholder<any, any, number>
  readonly scope?: Placeholder<any, any, string>
  readonly valign?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, string>
}

export type HTMLTableRowElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly bgcolor?: Placeholder<any, any, string>
  readonly valign?: Placeholder<any, any, string>
}

export type HTMLTableSectionElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder<any, any, string>
  readonly valign?: Placeholder<any, any, string>
}

export type HTMLTemplateElementProperties = HTMLElementProperties & {
  readonly content?: Placeholder<any, any, string>
}

export type HTMLTextAreaElementProperties = HTMLElementProperties & {
  readonly autocomplete?: Placeholder<any, any, string>
  readonly autofocus?: Placeholder<any, any, boolean>
  readonly cols?: Placeholder<any, any, number>
  readonly dirname?: Placeholder<any, any, string>
  readonly disabled?: Placeholder<any, any, boolean>
  readonly form?: Placeholder<any, any, string>
  readonly maxlength?: Placeholder<any, any, number>
  readonly minlength?: Placeholder<any, any, number>
  readonly name?: Placeholder<any, any, string>
  readonly placeholder?: Placeholder<any, any, string>
  readonly readonly?: Placeholder<any, any, boolean>
  readonly required?: Placeholder<any, any, boolean>
  readonly rows?: Placeholder<any, any, number>
  readonly wrap?: Placeholder<any, any, string>
}

export type HTMLTimeElementProperties = HTMLElementProperties & {
  readonly datetime?: Placeholder<any, any, string>
}

export type HTMLTitleElementProperties = HTMLElementProperties & {
  readonly text?: Placeholder<any, any, string>
}

export type HTMLTrackElementProperties = HTMLElementProperties & {
  readonly default?: Placeholder<any, any, boolean>
  readonly kind?: Placeholder<any, any, string>
  readonly label?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly srclang?: Placeholder<any, any, string>
}

export type HTMLUListElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder<any, any, boolean>
  readonly type?: Placeholder<any, any, string>
}

export type HTMLVideoElementProperties = HTMLElementProperties & {
  readonly autoplay?: Placeholder<any, any, boolean>
  readonly buffered?: Placeholder<any, any, string>
  readonly controls?: Placeholder<any, any, boolean>
  readonly crossorigin?: Placeholder<any, any, string>
  readonly height?: Placeholder<any, any, number>
  readonly loop?: Placeholder<any, any, boolean>
  readonly muted?: Placeholder<any, any, boolean>
  readonly played?: Placeholder<any, any, string>
  readonly poster?: Placeholder<any, any, string>
  readonly preload?: Placeholder<any, any, string>
  readonly src?: Placeholder<any, any, string>
  readonly width?: Placeholder<any, any, number>
}
