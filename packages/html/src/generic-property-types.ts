import { EventHandler } from './EventHandler.js'
import { Placeholder } from './Placeholder.js'

// Types used for describing properties of DOM nodes.
// These are not intended to be used directly, but rather for usage
// in an `extends` clause to allow for better types than any.

// Be careful with using these types, as they are not exhaustive
// and mostly generated by Github Copilot.

export type NodeProperties = {
  readonly textContent?: Placeholder.AnyOf<string> | null
}

export type ElementProperties = NodeProperties & {
  readonly className?: Placeholder.AnyOf<string>
  readonly id?: Placeholder.AnyOf<string>
  readonly innerHTML?: Placeholder.AnyOf<string>
  readonly scrollLeft?: Placeholder.AnyOf<number>
  readonly scrollTop?: Placeholder.AnyOf<number>
  readonly slot?: Placeholder.AnyOf<string>
}

export type HTMLElementProperties<Events = HTMLElementEventMap> = ElementProperties & {
  readonly accesskey?: Placeholder.AnyOf<string>
  readonly contenteditable?: Placeholder.AnyOf<string>
  readonly dir?: Placeholder.AnyOf<string>
  readonly draggable?: Placeholder.AnyOf<boolean>
  readonly hidden?: Placeholder.AnyOf<boolean>
  readonly hidefocus?: Placeholder.AnyOf<boolean>
  readonly innerText?: Placeholder.AnyOf<string>
  readonly lang?: Placeholder.AnyOf<string>
  readonly spellcheck?: Placeholder.AnyOf<boolean>
  readonly style?: Placeholder.AnyOf<string>
  readonly tabindex?: Placeholder.AnyOf<boolean>
  readonly title?: Placeholder.AnyOf<string>
} & {
  readonly [K in keyof Events as K extends string ? `on${Lowercase<K>}` : never]?: EventHandler<
    Events[K] & Event,
    any,
    any
  >
} & {
  readonly [_ in `data-${string}`]: Placeholder.AnyOf<string>
} & {
  readonly [_ in `aria-${string}`]: Placeholder.AnyOf<string>
}

export type HTMLAnchorElementProperties = HTMLElementProperties & {
  readonly charset?: Placeholder.AnyOf<string>
  readonly coords?: Placeholder.AnyOf<string>
  readonly download?: Placeholder.AnyOf<string>
  readonly hash?: Placeholder.AnyOf<string>
  readonly host?: Placeholder.AnyOf<string>
  readonly hostname?: Placeholder.AnyOf<string>
  readonly href?: Placeholder.AnyOf<string>
  readonly hreflang?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly pathname?: Placeholder.AnyOf<string>
  readonly port?: Placeholder.AnyOf<string>
  readonly protocol?: Placeholder.AnyOf<string>
  readonly rel?: Placeholder.AnyOf<string>
  readonly rev?: Placeholder.AnyOf<string>
  readonly search?: Placeholder.AnyOf<string>
  readonly shape?: Placeholder.AnyOf<string>
  readonly target?: Placeholder.AnyOf<string>
  readonly text?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly urn?: Placeholder.AnyOf<string>
}

export type HTMLAreaElementProperties = HTMLElementProperties & {
  readonly alt?: Placeholder.AnyOf<string>
  readonly coords?: Placeholder.AnyOf<string>
  readonly download?: Placeholder.AnyOf<string>
  readonly hash?: Placeholder.AnyOf<string>
  readonly host?: Placeholder.AnyOf<string>
  readonly hostname?: Placeholder.AnyOf<string>
  readonly href?: Placeholder.AnyOf<string>
  readonly noHref?: Placeholder.AnyOf<string>
  readonly pathname?: Placeholder.AnyOf<string>
  readonly port?: Placeholder.AnyOf<string>
  readonly protocol?: Placeholder.AnyOf<string>
  readonly rel?: Placeholder.AnyOf<string>
  readonly search?: Placeholder.AnyOf<string>
  readonly shape?: Placeholder.AnyOf<string>
  readonly target?: Placeholder.AnyOf<string>
}

export type HTMLAudioElementProperties = HTMLElementProperties & {
  readonly autoplay?: Placeholder.AnyOf<boolean>
  readonly buffered?: Placeholder.AnyOf<string>
  readonly controls?: Placeholder.AnyOf<boolean>
  readonly currentSrc?: Placeholder.AnyOf<string>
  readonly currentTime?: Placeholder.AnyOf<number>
  readonly defaultMuted?: Placeholder.AnyOf<boolean>
  readonly defaultPlaybackRate?: Placeholder.AnyOf<number>
  readonly duration?: Placeholder.AnyOf<number>
  readonly ended?: Placeholder.AnyOf<boolean>
  readonly error?: Placeholder.AnyOf<string>
  readonly loop?: Placeholder.AnyOf<boolean>
  readonly mediaGroup?: Placeholder.AnyOf<string>
  readonly muted?: Placeholder.AnyOf<boolean>
  readonly networkState?: Placeholder.AnyOf<number>
  readonly paused?: Placeholder.AnyOf<boolean>
  readonly playbackRate?: Placeholder.AnyOf<number>
  readonly played?: Placeholder.AnyOf<string>
  readonly preload?: Placeholder.AnyOf<string>
  readonly readyState?: Placeholder.AnyOf<number>
  readonly seekable?: Placeholder.AnyOf<string>
  readonly seeking?: Placeholder.AnyOf<boolean>
  readonly src?: Placeholder.AnyOf<string>
  readonly startDate?: Placeholder.AnyOf<string>
  readonly volume?: Placeholder.AnyOf<number>
}

export type HTMLBRElementProperties = HTMLElementProperties & {
  readonly clear?: Placeholder.AnyOf<string>
}

export type HTMLBaseElementProperties = HTMLElementProperties & {
  readonly href?: Placeholder.AnyOf<string>
  readonly target?: Placeholder.AnyOf<string>
}

export type HTMLBaseFontElementProperties = HTMLElementProperties & {
  readonly color?: Placeholder.AnyOf<string>
  readonly face?: Placeholder.AnyOf<string>
  readonly size?: Placeholder.AnyOf<string>
}

export type HTMLBodyElementProperties = HTMLElementProperties<HTMLBodyElementEventMap> & {
  readonly aLink?: Placeholder.AnyOf<string>
  readonly background?: Placeholder.AnyOf<string>
  readonly bgColor?: Placeholder.AnyOf<string>
  readonly link?: Placeholder.AnyOf<string>
  readonly text?: Placeholder.AnyOf<string>
  readonly vLink?: Placeholder.AnyOf<string>
}

export type HTMLButtonElementProperties = HTMLElementProperties & {
  readonly autofocus?: Placeholder.AnyOf<boolean>
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly form?: Placeholder.AnyOf<string>
  readonly formAction?: Placeholder.AnyOf<string>
  readonly formEnctype?: Placeholder.AnyOf<string>
  readonly formMethod?: Placeholder.AnyOf<string>
  readonly formNoValidate?: Placeholder.AnyOf<boolean>
  readonly formTarget?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly validationMessage?: Placeholder.AnyOf<string>
  readonly validity?: Placeholder.AnyOf<string>
  readonly value?: Placeholder.AnyOf<string>
  readonly willValidate?: Placeholder.AnyOf<boolean>
}

export type HTMLCanvasElementProperties = HTMLElementProperties & {
  readonly height?: Placeholder.AnyOf<number>
  readonly width?: Placeholder.AnyOf<number>
}

export type HTMLContentElementProperties = HTMLElementProperties & {
  readonly select?: Placeholder.AnyOf<string>
}

export type HTMLDListElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder.AnyOf<boolean>
}

export type HTMLDataElementProperties = HTMLElementProperties & {
  readonly value?: Placeholder.AnyOf<string>
}

export type HTMLDirectoryElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder.AnyOf<boolean>
}

export type HTMLDivElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
}

export type HTMLEmbedElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLFieldSetElementProperties = HTMLElementProperties & {
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly form?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly validationMessage?: Placeholder.AnyOf<string>
  readonly validity?: Placeholder.AnyOf<string>
  readonly willValidate?: Placeholder.AnyOf<boolean>
}

export type HTMLFontElementProperties = HTMLElementProperties & {
  readonly color?: Placeholder.AnyOf<string>
  readonly face?: Placeholder.AnyOf<string>
  readonly size?: Placeholder.AnyOf<string>
}

export type HTMLFormElementProperties = HTMLElementProperties & {
  readonly acceptCharset?: Placeholder.AnyOf<string>
  readonly action?: Placeholder.AnyOf<string>
  readonly autocomplete?: Placeholder.AnyOf<string>
  readonly enctype?: Placeholder.AnyOf<string>
  readonly encoding?: Placeholder.AnyOf<string>
  readonly length?: Placeholder.AnyOf<number>
  readonly method?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly noValidate?: Placeholder.AnyOf<boolean>
  readonly target?: Placeholder.AnyOf<string>
}

export type HTMLFrameElementProperties = HTMLElementProperties & {
  readonly border?: Placeholder.AnyOf<string>
  readonly frameBorder?: Placeholder.AnyOf<string>
  readonly frameSpacing?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string | number>
  readonly longDesc?: Placeholder.AnyOf<string>
  readonly marginHeight?: Placeholder.AnyOf<string>
  readonly marginWidth?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly noResize?: Placeholder.AnyOf<boolean>
  readonly scrolling?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string | number>
}

export type HTMLFrameSetElementProperties = HTMLElementProperties & {
  readonly border?: Placeholder.AnyOf<string>
  readonly borderFrame?: Placeholder.AnyOf<string>
  readonly cols?: Placeholder.AnyOf<string>
  readonly frameBorder?: Placeholder.AnyOf<string>
  readonly frameSpacing?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly rows?: Placeholder.AnyOf<string>
}

export type HTMLHRElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly color?: Placeholder.AnyOf<string>
  readonly noShade?: Placeholder.AnyOf<boolean>
  readonly size?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLHeadElementProperties = HTMLElementProperties & {
  readonly profile?: Placeholder.AnyOf<string>
}

export type HTMLHeadingElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
}

export type HTMLHtmlElementProperties = HTMLElementProperties & {
  readonly version?: Placeholder.AnyOf<string>
}

export type HTMLIFrameElementProperties = HTMLElementProperties<HTMLFrameSetElementEventMap> & {
  readonly align?: Placeholder.AnyOf<string>
  readonly allowfullscreen?: Placeholder.AnyOf<boolean>
  readonly allowpaymentrequest?: Placeholder.AnyOf<boolean>
  readonly allowusermedia?: Placeholder.AnyOf<boolean>
  readonly csp?: Placeholder.AnyOf<string>
  readonly frameborder?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string>
  readonly longdesc?: Placeholder.AnyOf<string>
  readonly marginheight?: Placeholder.AnyOf<string>
  readonly marginwidth?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly referrerpolicy?: Placeholder.AnyOf<string>
  readonly sandbox?: Placeholder.AnyOf<string>
  readonly scrolling?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly srcdoc?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLImageElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly alt?: Placeholder.AnyOf<string>
  readonly border?: Placeholder.AnyOf<string>
  readonly complete?: Placeholder.AnyOf<boolean>
  readonly crossorigin?: Placeholder.AnyOf<string>
  readonly currentsrc?: Placeholder.AnyOf<string>
  readonly decoding?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<number>
  readonly hspace?: Placeholder.AnyOf<number>
  readonly isMap?: Placeholder.AnyOf<boolean>
  readonly longdesc?: Placeholder.AnyOf<string>
  readonly lowsrc?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly naturalheight?: Placeholder.AnyOf<number>
  readonly naturalwidth?: Placeholder.AnyOf<number>
  readonly referrerpolicy?: Placeholder.AnyOf<string>
  readonly sizes?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly srcset?: Placeholder.AnyOf<string>
  readonly usemap?: Placeholder.AnyOf<string>
  readonly vspace?: Placeholder.AnyOf<number>
  readonly width?: Placeholder.AnyOf<number>
  readonly x?: Placeholder.AnyOf<number>
  readonly y?: Placeholder.AnyOf<number>
}

export type HTMLInputElementProperties = HTMLElementProperties & {
  readonly accept?: Placeholder.AnyOf<string>
  readonly align?: Placeholder.AnyOf<string>
  readonly alt?: Placeholder.AnyOf<string>
  readonly autocomplete?: Placeholder.AnyOf<string>
  readonly autofocus?: Placeholder.AnyOf<boolean>
  readonly border?: Placeholder.AnyOf<string>
  readonly checked?: Placeholder.AnyOf<boolean>
  readonly defaultChecked?: Placeholder.AnyOf<boolean>
  readonly defaultValue?: Placeholder.AnyOf<string>
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly files?: Placeholder.AnyOf<FileList>
  readonly form?: Placeholder.AnyOf<string>
  readonly formAction?: Placeholder.AnyOf<string>
  readonly formEnctype?: Placeholder.AnyOf<string>
  readonly formMethod?: Placeholder.AnyOf<string>
  readonly formNoValidate?: Placeholder.AnyOf<boolean>
  readonly formTarget?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string | number>
  readonly indeterminate?: Placeholder.AnyOf<boolean>
  readonly list?: Placeholder.AnyOf<string>
  readonly max?: Placeholder.AnyOf<string | number>
  readonly maxLength?: Placeholder.AnyOf<number>
  readonly min?: Placeholder.AnyOf<string | number>
  readonly minLength?: Placeholder.AnyOf<number>
  readonly multiple?: Placeholder.AnyOf<boolean>
  readonly name?: Placeholder.AnyOf<string>
  readonly pattern?: Placeholder.AnyOf<string>
  readonly placeholder?: Placeholder.AnyOf<string>
  readonly readOnly?: Placeholder.AnyOf<boolean>
  readonly required?: Placeholder.AnyOf<boolean>
  readonly selectionDirection?: Placeholder.AnyOf<string>
  readonly selectionEnd?: Placeholder.AnyOf<number>
  readonly selectionStart?: Placeholder.AnyOf<number>
  readonly size?: Placeholder.AnyOf<number>
  readonly src?: Placeholder.AnyOf<string>
  readonly step?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly useMap?: Placeholder.AnyOf<string>
  readonly value?: Placeholder.AnyOf<string>
  readonly valueAsDate?: Placeholder.AnyOf<Date>
  readonly valueAsNumber?: Placeholder.AnyOf<number>
  readonly width?: Placeholder.AnyOf<string | number>
}

export type HTMLLIElementProperties = HTMLElementProperties & {
  readonly type?: Placeholder.AnyOf<string>
  readonly value?: Placeholder.AnyOf<number>
}

export type HTMLLabelElementProperties = HTMLElementProperties & {
  readonly for?: Placeholder.AnyOf<string>
  readonly htmlFor?: Placeholder.AnyOf<string>
}

export type HTMLLegendElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
}

export type HTMLLinkElementProperties = HTMLElementProperties & {
  readonly as?: Placeholder.AnyOf<string>
  readonly charset?: Placeholder.AnyOf<string>
  readonly crossorigin?: Placeholder.AnyOf<string>
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly href?: Placeholder.AnyOf<string>
  readonly hreflang?: Placeholder.AnyOf<string>
  readonly integrity?: Placeholder.AnyOf<string>
  readonly media?: Placeholder.AnyOf<string>
  readonly referrerpolicy?: Placeholder.AnyOf<string>
  readonly rel?: Placeholder.AnyOf<string>
  readonly rev?: Placeholder.AnyOf<string>
  readonly sizes?: Placeholder.AnyOf<string>
  readonly target?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLMapElementProperties = HTMLElementProperties & {
  readonly name?: Placeholder.AnyOf<string>
}

export type HTMLMediaElementProperties = HTMLElementProperties & {
  readonly autoplay?: Placeholder.AnyOf<boolean>
  readonly controls?: Placeholder.AnyOf<boolean>
  readonly crossorigin?: Placeholder.AnyOf<string>
  readonly currentTime?: Placeholder.AnyOf<number>
  readonly defaultMuted?: Placeholder.AnyOf<boolean>
  readonly defaultPlaybackRate?: Placeholder.AnyOf<number>
  readonly disableRemotePlayback?: Placeholder.AnyOf<boolean>
  readonly loop?: Placeholder.AnyOf<boolean>
  readonly mediaGroup?: Placeholder.AnyOf<string>
  readonly muted?: Placeholder.AnyOf<boolean>
  readonly playbackRate?: Placeholder.AnyOf<number>
  readonly preload?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly volume?: Placeholder.AnyOf<number>
}

export type HTMLMenuElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder.AnyOf<boolean>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLMetaElementProperties = HTMLElementProperties & {
  readonly charset?: Placeholder.AnyOf<string>
  readonly content?: Placeholder.AnyOf<string>
  readonly httpEquiv?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
}

export type HTMLMeterElementProperties = HTMLElementProperties & {
  readonly high?: Placeholder.AnyOf<number>
  readonly low?: Placeholder.AnyOf<number>
  readonly max?: Placeholder.AnyOf<number>
  readonly min?: Placeholder.AnyOf<number>
  readonly optimum?: Placeholder.AnyOf<number>
  readonly value?: Placeholder.AnyOf<number>
}

export type HTMLModElementProperties = HTMLElementProperties & {
  readonly cite?: Placeholder.AnyOf<string>
  readonly datetime?: Placeholder.AnyOf<string>
}

export type HTMLOListElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder.AnyOf<boolean>
  readonly reversed?: Placeholder.AnyOf<boolean>
  readonly start?: Placeholder.AnyOf<number>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLObjectElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly archive?: Placeholder.AnyOf<string>
  readonly border?: Placeholder.AnyOf<string>
  readonly code?: Placeholder.AnyOf<string>
  readonly codeBase?: Placeholder.AnyOf<string>
  readonly codeType?: Placeholder.AnyOf<string>
  readonly data?: Placeholder.AnyOf<string>
  readonly declare?: Placeholder.AnyOf<boolean>
  readonly form?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string | number>
  readonly hspace?: Placeholder.AnyOf<number>
  readonly name?: Placeholder.AnyOf<string>
  readonly standby?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly useMap?: Placeholder.AnyOf<string>
  readonly vspace?: Placeholder.AnyOf<number>
  readonly width?: Placeholder.AnyOf<string | number>
}

export type HTMLOptGroupElementProperties = HTMLElementProperties & {
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly label?: Placeholder.AnyOf<string>
}

export type HTMLOptionElementProperties = HTMLElementProperties & {
  readonly defaultSelected?: Placeholder.AnyOf<boolean>
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly label?: Placeholder.AnyOf<string>
  readonly selected?: Placeholder.AnyOf<boolean>
  readonly text?: Placeholder.AnyOf<string>
  readonly value?: Placeholder.AnyOf<string>
}

export type HTMLOutputElementProperties = HTMLElementProperties & {
  readonly defaultValue?: Placeholder.AnyOf<string>
  readonly htmlFor?: Placeholder.AnyOf<string>
  readonly name?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly value?: Placeholder.AnyOf<string>
}

export type HTMLParagraphElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
}

export type HTMLParamElementProperties = HTMLElementProperties & {
  readonly name?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
  readonly value?: Placeholder.AnyOf<string>
  readonly valueType?: Placeholder.AnyOf<string>
}

export type HTMLPreElementProperties = HTMLElementProperties & {
  readonly width?: Placeholder.AnyOf<number>
}

export type HTMLProgressElementProperties = HTMLElementProperties & {
  readonly max?: Placeholder.AnyOf<number>
  readonly position?: Placeholder.AnyOf<number>
  readonly value?: Placeholder.AnyOf<number>
}

export type HTMLQuoteElementProperties = HTMLElementProperties & {
  readonly cite?: Placeholder.AnyOf<string>
}

export type HTMLScriptElementProperties = HTMLElementProperties & {
  readonly async?: Placeholder.AnyOf<boolean>
  readonly charset?: Placeholder.AnyOf<string>
  readonly crossorigin?: Placeholder.AnyOf<string>
  readonly defer?: Placeholder.AnyOf<boolean>
  readonly integrity?: Placeholder.AnyOf<string>
  readonly nomodule?: Placeholder.AnyOf<boolean>
  readonly nonce?: Placeholder.AnyOf<string>
  readonly referrerpolicy?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLSelectElementProperties = HTMLElementProperties & {
  readonly autocomplete?: Placeholder.AnyOf<string>
  readonly autofocus?: Placeholder.AnyOf<boolean>
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly form?: Placeholder.AnyOf<string>
  readonly multiple?: Placeholder.AnyOf<boolean>
  readonly name?: Placeholder.AnyOf<string>
  readonly required?: Placeholder.AnyOf<boolean>
  readonly size?: Placeholder.AnyOf<number>
  readonly value?: Placeholder.AnyOf<string>
}

export type HTMLSlotElementProperties = HTMLElementProperties & {
  readonly name?: Placeholder.AnyOf<string>
}

export type HTMLSourceElementProperties = HTMLElementProperties & {
  readonly media?: Placeholder.AnyOf<string>
  readonly sizes?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly srcset?: Placeholder.AnyOf<string>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLSpanElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
}

export type HTMLStyleElementProperties = HTMLElementProperties & {
  readonly media?: Placeholder.AnyOf<string>
  readonly nonce?: Placeholder.AnyOf<string>
  readonly scoped?: Placeholder.AnyOf<boolean>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLTableCaptionElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
}

export type HTMLTableCellElementProperties = HTMLElementProperties & {
  readonly abbr?: Placeholder.AnyOf<string>
  readonly align?: Placeholder.AnyOf<string>
  readonly axis?: Placeholder.AnyOf<string>
  readonly bgcolor?: Placeholder.AnyOf<string>
  readonly colspan?: Placeholder.AnyOf<number>
  readonly headers?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string>
  readonly nowrap?: Placeholder.AnyOf<boolean>
  readonly rowspan?: Placeholder.AnyOf<number>
  readonly scope?: Placeholder.AnyOf<string>
  readonly valign?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLTableColElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly span?: Placeholder.AnyOf<number>
  readonly valign?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLTableDataCellElementProperties = HTMLElementProperties & {
  readonly abbr?: Placeholder.AnyOf<string>
  readonly align?: Placeholder.AnyOf<string>
  readonly axis?: Placeholder.AnyOf<string>
  readonly bgcolor?: Placeholder.AnyOf<string>
  readonly colspan?: Placeholder.AnyOf<number>
  readonly headers?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string>
  readonly nowrap?: Placeholder.AnyOf<boolean>
  readonly rowspan?: Placeholder.AnyOf<number>
  readonly scope?: Placeholder.AnyOf<string>
  readonly valign?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLTableElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly bgcolor?: Placeholder.AnyOf<string>
  readonly border?: Placeholder.AnyOf<string>
  readonly cellpadding?: Placeholder.AnyOf<string>
  readonly cellspacing?: Placeholder.AnyOf<string>
  readonly frame?: Placeholder.AnyOf<string>
  readonly rules?: Placeholder.AnyOf<string>
  readonly summary?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLTableHeaderCellElementProperties = HTMLElementProperties & {
  readonly abbr?: Placeholder.AnyOf<string>
  readonly align?: Placeholder.AnyOf<string>
  readonly axis?: Placeholder.AnyOf<string>
  readonly bgcolor?: Placeholder.AnyOf<string>
  readonly colspan?: Placeholder.AnyOf<number>
  readonly headers?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<string>
  readonly nowrap?: Placeholder.AnyOf<boolean>
  readonly rowspan?: Placeholder.AnyOf<number>
  readonly scope?: Placeholder.AnyOf<string>
  readonly valign?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<string>
}

export type HTMLTableRowElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly bgcolor?: Placeholder.AnyOf<string>
  readonly valign?: Placeholder.AnyOf<string>
}

export type HTMLTableSectionElementProperties = HTMLElementProperties & {
  readonly align?: Placeholder.AnyOf<string>
  readonly valign?: Placeholder.AnyOf<string>
}

export type HTMLTemplateElementProperties = HTMLElementProperties & {
  readonly content?: Placeholder.AnyOf<string>
}

export type HTMLTextAreaElementProperties = HTMLElementProperties & {
  readonly autocomplete?: Placeholder.AnyOf<string>
  readonly autofocus?: Placeholder.AnyOf<boolean>
  readonly cols?: Placeholder.AnyOf<number>
  readonly dirname?: Placeholder.AnyOf<string>
  readonly disabled?: Placeholder.AnyOf<boolean>
  readonly form?: Placeholder.AnyOf<string>
  readonly maxlength?: Placeholder.AnyOf<number>
  readonly minlength?: Placeholder.AnyOf<number>
  readonly name?: Placeholder.AnyOf<string>
  readonly placeholder?: Placeholder.AnyOf<string>
  readonly readonly?: Placeholder.AnyOf<boolean>
  readonly required?: Placeholder.AnyOf<boolean>
  readonly rows?: Placeholder.AnyOf<number>
  readonly wrap?: Placeholder.AnyOf<string>
}

export type HTMLTimeElementProperties = HTMLElementProperties & {
  readonly datetime?: Placeholder.AnyOf<string>
}

export type HTMLTitleElementProperties = HTMLElementProperties & {
  readonly text?: Placeholder.AnyOf<string>
}

export type HTMLTrackElementProperties = HTMLElementProperties & {
  readonly default?: Placeholder.AnyOf<boolean>
  readonly kind?: Placeholder.AnyOf<string>
  readonly label?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly srclang?: Placeholder.AnyOf<string>
}

export type HTMLUListElementProperties = HTMLElementProperties & {
  readonly compact?: Placeholder.AnyOf<boolean>
  readonly type?: Placeholder.AnyOf<string>
}

export type HTMLVideoElementProperties = HTMLElementProperties & {
  readonly autoplay?: Placeholder.AnyOf<boolean>
  readonly buffered?: Placeholder.AnyOf<string>
  readonly controls?: Placeholder.AnyOf<boolean>
  readonly crossorigin?: Placeholder.AnyOf<string>
  readonly height?: Placeholder.AnyOf<number>
  readonly loop?: Placeholder.AnyOf<boolean>
  readonly muted?: Placeholder.AnyOf<boolean>
  readonly played?: Placeholder.AnyOf<string>
  readonly poster?: Placeholder.AnyOf<string>
  readonly preload?: Placeholder.AnyOf<string>
  readonly src?: Placeholder.AnyOf<string>
  readonly width?: Placeholder.AnyOf<number>
}
