// vitest.config.mts
import { dirname as dirname2 } from "path";
import { fileURLToPath } from "url";

// ../../vitest-make-config.mts
import babel from "file:///Users/tylor/code/typed/node_modules/.pnpm/@vitejs+plugin-react@4.2.1_vite@5.2.10_@types+node@20.12.7_terser@5.31.0_/node_modules/@vitejs/plugin-react/dist/index.mjs";
import tsconfigPaths from "file:///Users/tylor/code/typed/node_modules/.pnpm/vite-plugin-tsconfig-paths@1.4.1_typescript@5.4.5_vite@5.2.10_@types+node@20.12.7_terser@5.31.0_/node_modules/vite-plugin-tsconfig-paths/index.mjs";
import { createRequire } from "module";
import { dirname, join } from "path";
import { defineProject } from "file:///Users/tylor/code/typed/node_modules/.pnpm/vitest@1.5.2_@types+node@20.12.7_@vitest+browser@1.5.2_happy-dom@14.7.1_terser@5.31.0/node_modules/vitest/dist/config.js";
var __vite_injected_original_import_meta_url = "file:///Users/tylor/code/typed/vitest-make-config.mts";
var require2 = createRequire(__vite_injected_original_import_meta_url);
var babelConfig = require2("./.babel.mjs.json");
function makeTestConfig(directory, testPath = "./test/*.ts", tsConfigFileName = "tsconfig.test.json") {
  return defineProject({
    plugins: [
      babel({ babel: babelConfig }),
      tsconfigPaths({
        tsConfigPath: join(directory, tsConfigFileName)
      })
    ],
    test: {
      watch: process.env.WATCH === "true",
      include: Array.isArray(testPath) ? testPath : [testPath],
      exclude: [
        "**/test/type-level/*",
        "**/test/helpers/*",
        "**/test/fixtures/*"
      ],
      globals: true
    }
  });
}

// vitest.config.mts
var __vite_injected_original_import_meta_url2 = "file:///Users/tylor/code/typed/packages/route/vitest.config.mts";
var vitest_config_default = makeTestConfig(dirname2(fileURLToPath(__vite_injected_original_import_meta_url2)));
export {
  vitest_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZXN0LmNvbmZpZy5tdHMiLCAiLi4vLi4vdml0ZXN0LW1ha2UtY29uZmlnLm10cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy90eWxvci9jb2RlL3R5cGVkL3BhY2thZ2VzL3JvdXRlXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvdHlsb3IvY29kZS90eXBlZC9wYWNrYWdlcy9yb3V0ZS92aXRlc3QuY29uZmlnLm10c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvdHlsb3IvY29kZS90eXBlZC9wYWNrYWdlcy9yb3V0ZS92aXRlc3QuY29uZmlnLm10c1wiOy8vLyA8cmVmZXJlbmNlIHR5cGVzPVwidml0ZXN0XCIgLz5cblxuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gXCJwYXRoXCJcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwidXJsXCJcbmltcG9ydCB7IG1ha2VUZXN0Q29uZmlnIH0gZnJvbSBcIi4uLy4uL3ZpdGVzdC1tYWtlLWNvbmZpZy5tanNcIlxuXG5leHBvcnQgZGVmYXVsdCBtYWtlVGVzdENvbmZpZyhkaXJuYW1lKGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKSkpXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy90eWxvci9jb2RlL3R5cGVkXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvdHlsb3IvY29kZS90eXBlZC92aXRlc3QtbWFrZS1jb25maWcubXRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy90eWxvci9jb2RlL3R5cGVkL3ZpdGVzdC1tYWtlLWNvbmZpZy5tdHNcIjsvLy8gPHJlZmVyZW5jZSB0eXBlcz1cInZpdGVzdFwiIC8+XG5cbmltcG9ydCBiYWJlbCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIlxuaW1wb3J0IHRzY29uZmlnUGF0aHMgZnJvbSBcInZpdGUtcGx1Z2luLXRzY29uZmlnLXBhdGhzXCJcblxuaW1wb3J0IHsgY3JlYXRlUmVxdWlyZSB9IGZyb20gXCJtb2R1bGVcIlxuaW1wb3J0IHsgZGlybmFtZSwgam9pbiB9IGZyb20gXCJwYXRoXCJcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwidXJsXCJcbmltcG9ydCB7IGRlZmluZVByb2plY3QgfSBmcm9tIFwidml0ZXN0L2NvbmZpZ1wiXG5cbmNvbnN0IHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKGltcG9ydC5tZXRhLnVybClcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IGJhYmVsQ29uZmlnID0gcmVxdWlyZShcIi4vLmJhYmVsLm1qcy5qc29uXCIpXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGVzdENvbmZpZyhcbiAgZGlyZWN0b3J5OiBzdHJpbmcsXG4gIHRlc3RQYXRoOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+ID0gXCIuL3Rlc3QvKi50c1wiLFxuICB0c0NvbmZpZ0ZpbGVOYW1lOiBzdHJpbmcgPSBcInRzY29uZmlnLnRlc3QuanNvblwiXG4pIHtcbiAgcmV0dXJuIGRlZmluZVByb2plY3Qoe1xuICAgIHBsdWdpbnM6IFtcbiAgICAgIGJhYmVsKHsgYmFiZWw6IGJhYmVsQ29uZmlnIH0pLFxuICAgICAgdHNjb25maWdQYXRocyh7XG4gICAgICAgIHRzQ29uZmlnUGF0aDogam9pbihkaXJlY3RvcnksIHRzQ29uZmlnRmlsZU5hbWUpXG4gICAgICB9KVxuICAgIF0sXG4gICAgdGVzdDoge1xuICAgICAgd2F0Y2g6IHByb2Nlc3MuZW52LldBVENIID09PSBcInRydWVcIixcbiAgICAgIGluY2x1ZGU6IEFycmF5LmlzQXJyYXkodGVzdFBhdGgpID8gdGVzdFBhdGggOiBbdGVzdFBhdGhdLFxuICAgICAgZXhjbHVkZTogW1xuICAgICAgICBcIioqL3Rlc3QvdHlwZS1sZXZlbC8qXCIsXG4gICAgICAgIFwiKiovdGVzdC9oZWxwZXJzLypcIixcbiAgICAgICAgXCIqKi90ZXN0L2ZpeHR1cmVzLypcIlxuICAgICAgXSxcbiAgICAgIGdsb2JhbHM6IHRydWVcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGVzdENvbmZpZ0Zyb21JbXBvcnRNZXRhVXJsKFxuICB1cmw6IHN0cmluZyxcbiAgdGVzdFBhdGg6IHN0cmluZyB8IEFycmF5PHN0cmluZz4gPSBcIi4vdGVzdC8qLnRzXCIsXG4gIHRzQ29uZmlnRmlsZU5hbWU6IHN0cmluZyA9IFwidHNjb25maWcudGVzdC5qc29uXCJcbikge1xuICByZXR1cm4gbWFrZVRlc3RDb25maWcoZGlybmFtZShmaWxlVVJMVG9QYXRoKHVybCkpLCB0ZXN0UGF0aCwgdHNDb25maWdGaWxlTmFtZSlcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFFQSxTQUFTLFdBQUFBLGdCQUFlO0FBQ3hCLFNBQVMscUJBQXFCOzs7QUNEOUIsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sbUJBQW1CO0FBRTFCLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsU0FBUyxZQUFZO0FBRTlCLFNBQVMscUJBQXFCO0FBUmdJLElBQU0sMkNBQTJDO0FBVS9NLElBQU1DLFdBQVUsY0FBYyx3Q0FBZTtBQUc3QyxJQUFNLGNBQWNBLFNBQVEsbUJBQW1CO0FBRXhDLFNBQVMsZUFDZCxXQUNBLFdBQW1DLGVBQ25DLG1CQUEyQixzQkFDM0I7QUFDQSxTQUFPLGNBQWM7QUFBQSxJQUNuQixTQUFTO0FBQUEsTUFDUCxNQUFNLEVBQUUsT0FBTyxZQUFZLENBQUM7QUFBQSxNQUM1QixjQUFjO0FBQUEsUUFDWixjQUFjLEtBQUssV0FBVyxnQkFBZ0I7QUFBQSxNQUNoRCxDQUFDO0FBQUEsSUFDSDtBQUFBLElBQ0EsTUFBTTtBQUFBLE1BQ0osT0FBTyxRQUFRLElBQUksVUFBVTtBQUFBLE1BQzdCLFNBQVMsTUFBTSxRQUFRLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUTtBQUFBLE1BQ3ZELFNBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsTUFDQSxTQUFTO0FBQUEsSUFDWDtBQUFBLEVBQ0YsQ0FBQztBQUNIOzs7QUR0Q3VMLElBQU1DLDRDQUEyQztBQU14TyxJQUFPLHdCQUFRLGVBQWVDLFNBQVEsY0FBY0QseUNBQWUsQ0FBQyxDQUFDOyIsCiAgIm5hbWVzIjogWyJkaXJuYW1lIiwgInJlcXVpcmUiLCAiX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCIsICJkaXJuYW1lIl0KfQo=
