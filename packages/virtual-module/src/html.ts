import { promises, readFileSync } from 'fs'
import { dirname, join, resolve } from 'path'

import { ModuleKind, Extension } from 'typescript'

import { VirtualModuleFile, VirtualModuleFilePlugin, ViteParams } from './VirtualModulePlugin'
import { FileBuilder } from './file-builder'

const htmlPlugin: VirtualModuleFilePlugin<null> = {
  name: '@typed/virtual-module/html',
  regex: /^html:(.+)$/,
  resolveVirtualModule: (id, importer) =>
    VirtualModuleFile({
      id,
      importer,
      fileName: createFileName(id, importer),
      kind: ModuleKind.ES2020,
      extension: Extension.Ts,
    }),
  generateMetadata: () => null,
  generateTypeScriptContent: (vm, { params }) => {
    const placeholder = getPlaceholderParam(params)
    const content = readFileSync(getHtmlFileName(vm)).toString()

    return buildFileContent(dirname(vm.fileName), content, placeholder)
  },
  generateViteContent: async (vm, { params }, viteParams) => {
    const assetDirectory = join(viteParams.clientOutputDirectory, viteParams.assetDirectory)
    const content = await getViteContent(vm, viteParams)
    const placeholder = getPlaceholderParam(params)

    return buildFileContent(assetDirectory, content, placeholder, viteParams)
  },
}

export = htmlPlugin

function getHtmlFileName(vm: VirtualModuleFile) {
  return resolve(dirname(vm.importer), vm.id.replace('html:', '') + '.html')
}

function createFileName(id: string, importer: string) {
  return resolve(dirname(importer), id.replace('html:', '') + '.html.__generated__.ts')
}

function getPlaceholderParam(params: Record<string, any>): RegExp {
  if (params.placeholder && typeof params.placeholder === 'string') {
    return new RegExp(params.placeholder)
  }

  return /<!--(\s+)?TYPED_CONTENT(\s+)?-->/
}

function parseBasePath(html: string, existingBase?: string): string | null {
  const match = html.match(/<base\s+href="(.+)"\s*\/?>/)

  if (!match) {
    return null
  }

  return existingBase ? join(existingBase, match[1]) : match[1]
}

function formatStringLiteralOrNull(value: string | null) {
  if (value === null) {
    return 'null'
  }

  return `'${value}'`
}

async function getViteContent(vm: VirtualModuleFile, viteParams: ViteParams) {
  if (viteParams.viteDevServer) {
    const filePath = getHtmlFileName(vm)
    const content = await viteParams.viteDevServer.transformIndexHtml(
      filePath,
      await promises.readFile(filePath).then((buffer) => buffer.toString()),
    )

    return content
  } else {
    // For Production we need to read the file from the asset directory since vite has already transformed it.

    const assetDirectory = join(viteParams.clientOutputDirectory, viteParams.assetDirectory)
    const filePath = join(assetDirectory, vm.id.replace('html:', '') + '.html')
    const content = await promises.readFile(filePath).then((buffer) => buffer.toString())

    return content
  }
}

function buildFileContent(
  assetDirectory: string,
  content: string,
  placeholder: RegExp,
  viteParams?: ViteParams,
) {
  const [before, , after] = content.split(placeholder)
  const basePath = parseBasePath(content, viteParams?.base)

  return new FileBuilder()
    .addText(`export const content: string = \`${content}\`;`)
    .addText(`export const placeholder: RegExp = /${placeholder.source}/${placeholder.flags};`)
    .addText(`export const before: string = \`${before}\`;`)
    .addText(`export const after: string = \`${after}\`;`)
    .addText(`export const basePath: string | null = ${formatStringLiteralOrNull(basePath)};`)
    .addText(`export const assetDirectory: string = '${assetDirectory}';`)
    .build(`File auto-generated by @typed/virtual-module/html`)
}
